#!/usr/bin/python

# colours.py


import wx
from exploits.exploits_list import *
from exploits.reporter import *

class PanelImage(wx.Panel):
    """class Panel1 creates a panel with an image on it, inherits wx.Panel"""
    def __init__(self, parent, id, image_path):
        # create the panel
        wx.Panel.__init__(self, parent, id)
        try:
            # pick an image file you have in the working folder
            # you can load .jpg  .png  .bmp  or .gif files
            image_file = image_path
            bmp1 = wx.Image(image_file, wx.BITMAP_TYPE_ANY).ConvertToBitmap()
            # image's upper left corner anchors at panel coordinates (0, 0)
            self.bitmap1 = wx.StaticBitmap(self, -1, bmp1, (0, 0))
            # show some image details
            str1 = "%s  %dx%d" % (image_file, bmp1.GetWidth(), bmp1.GetHeight())
            parent.SetTitle(str1)
        except IOError:
            print "Image filae %s not found" % image_file
            raise SystemExit

class ExploitsDialog(wx.Dialog):
    def __init__(self, parent, id, title, bl_object):

        self.bl_object = bl_object

        wx.Dialog.__init__(self, parent, id, title, size=(400, 400))
        vbox = wx.BoxSizer(wx.VERTICAL)
        
        # Get the Current game config
        self.current_game_config = self.bl_object.GetCurrentGameConfig()

        team_names = []
        
        for team in self.current_game_config:
            team_names.append(team['name'])
        
        self.team_combo =  wx.ComboBox(self, -1,choices=team_names, style=wx.CB_READONLY)
        vbox.Add(self.team_combo,1,wx.ALIGN_CENTER)
        
        self.panels = []
        
        self.pnl1 = wx.Panel(self, 1)
        self.panels.append(self.pnl1)
        self.pnl2 = wx.Panel(self, 2)
        self.panels.append(self.pnl2)
        self.pnl3 = wx.Panel(self, 3)
        self.panels.append(self.pnl3)
        self.pnl4 = wx.Panel(self, 4)
        self.panels.append(self.pnl4)
        self.pnl5 = wx.Panel(self, 5)
        self.panels.append(self.pnl5)
        self.pnl6 = wx.Panel(self, 6)
        self.panels.append(self.pnl6)
        self.pnl7 = wx.Panel(self, 7)
        self.panels.append(self.pnl7)
        self.pnl8 = wx.Panel(self, 8)
        self.panels.append(self.pnl8)
        
        for pnl in self.panels:
            pnl.Bind(wx.EVT_LEFT_UP, self.OnPanelClick)
        

        gs = wx.GridSizer(4,2,3,3)
        gs.AddMany([ (self.pnl1, 0 ,wx.EXPAND),
            (self.pnl2, 0, wx.EXPAND),
            (self.pnl3, 0, wx.EXPAND),
            (self.pnl4, 0, wx.EXPAND),
            (self.pnl5, 0, wx.EXPAND),
            (self.pnl6, 0, wx.EXPAND),
            (self.pnl7, 0, wx.EXPAND),
            (self.pnl8, 0, wx.EXPAND) ])

        vbox.Add(gs, 8, wx.EXPAND | wx.TOP, 5)
        self.SetSizer(vbox)
        self.SetColors()
        self.Centre()

    def SetColors(self):
        self.pnl1.SetBackgroundColour(wx.BLACK)
        self.pnl2.SetBackgroundColour(wx.Colour(139,105,20))
        self.pnl3.SetBackgroundColour(wx.RED)
        self.pnl4.SetBackgroundColour('#0000FF')
        self.pnl5.SetBackgroundColour('sea green')
        self.pnl6.SetBackgroundColour('midnight blue')
        self.pnl7.SetBackgroundColour(wx.LIGHT_GREY)
        self.pnl8.SetBackgroundColour('plum')
        
    def OnPanelClick(self, event):
        print (event.GetEventType())
        pnl_object = event.GetEventObject()
        exploit_id = self.GetEventExploitID(event.GetEventType())
        exploit_class = EXPLOITS[exploit_id]
        
        reporter = reporter_init()
        
        exploits = []
        
        # Run exploit against all teams in game
        for team in self.current_game_config:
            print "calling exploit '%s' on %s!" % (exploit_id, team["name"])
            exploit = exploit_class(team)
            exploit.run()
            
            exploits.append((exploit, team))

            print "%s's score for the exploit: %s" % (team["name"], score)
            
        results = []
            
        for i in xrange(2):
            results.append(reporter_wait(reporter))
            
        for exploit, team in exploits:
            for report in results:
                if team["ip"] == report[0]:
                    score = exploit.score(report[1])
                    
                    # TODO: Add the [score] to [team]

        print (pnl_object.GetId())

    # Map keys to exploits
    def GetEventExploitID(self, event_type):
        # TODO - Add logic later
        return EXPLOIT_ID_FILES
    
    def Show(self):
        self.ShowModal()
        self.Destroy()
    
