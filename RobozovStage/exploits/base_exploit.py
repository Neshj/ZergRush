__author__ = 'raz'

from defs import *

# base exploit class
# inheritors should implement:
# exploit(self.ip, self.port) - runs the actual attack and returns report
#   self.id - data member which tells this class what exploit it is
class base_exploit(object):
    # team - dict with the following entries:
    #   ip
    #   port
    #   name
    def __init__(self, team_config):
        self.ip = team_config["Robot_ip"]
        self.port = int(team_config["server_robot_port"])  # port is an integer
        self.team = team_config["name"]

    # Evaluate a report (function name) for scoring
    def score(self, report):
        print "Recieved report from %s: '%s'" % (self.team, report)

        # Good report = get cyber points!
        if (report in REPORTS_ACCEPT[self.id]):
            print "Great cyberjob - %s blocked our exploit!" % self.team
            return CYBER_POINTS[self.id]
        # Damage report = no points
        elif (report in REPORTS_DAMAGE):
            print "Muhahahaa - %s was exploited!" % self.team
            return CYBER_DAMAGE
        # Unkown report = inspect later
        else:
            print "Unexpeced report from %s..." % self.team
            return CYBER_CONFUSION

    def run(self):
        # Exploit the robot
        report = self.exploit(self.ip, self.port)
        # Return how many points the team should get for the attack
        return self.score(report)


TEAM_CONFIG_DEBUG = {"name": "test_name",
                     "Robot_ip": "1.2.3.4",
                     "Robot_port": "1337"}