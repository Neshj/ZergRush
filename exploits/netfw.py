#!/usr/bin/python
from struct import pack

MAX_PACKET_SIZE = 64

class Protocol:
	HandleDataRequest = 0
	HandleKARequest = 1
	HandleFileRequest = 2
	HandlePidRequest = 3
	HandleVariablesRequest = 4
	HandleUpperRequest = 5

	kRequest = 0
	kRespone = 1

	def __init__(self, msg_type, payload = "", direction = kRequest):
		self.pkt = payload
		self.type = msg_type
		self.direction = direction

	def serialize(self):
		return pack("II", self.type, self.direction) + self.pkt

class ProtocolHandleUpper(Protocol):
	def __init__(self, path, payload=""):
		# Remember path and payload
		self.path = path
		self.payload = payload
		self.path_size = 0
		self.payload_size = 0

		# Call parent ctor to init general variables
		Protocol.__init__(self, Protocol.HandleUpperRequest)

	def serialize(self):
		if self.path_size == 0:
			self.path_size = len(self.path)

		if self.payload_size == 0:
			self.payload_size = len(self.payload)
		# Fill content
		self.pkt = pack("I%dsI" % len(self.path), self.path_size, self.path, self.payload_size) + self.payload
#		self.pkt = pack("I%dsI" % len(self.path), len(self.path), self.path, len(self.payload)) + self.payload

		return Protocol.serialize(self)


class ProtocolHandleFileRequest(Protocol):
	def __init__(self, path = ""):
		# Remember path and payload
		self.path = path

		# Call parent ctor to init general variables
		Protocol.__init__(self, Protocol.HandleFileRequest)

	def serialize(self):
		# Fill content
		if len(self.path) == 0:
			self.pkt = ""
		else:
			self.pkt = pack("%ds" % len(self.path), len(self.path))

		return Protocol.serialize(self)

		

class ProtocolHandleKARequest(Protocol):
	def __init__(self, payload, size = 0):
		self.payload = payload
		if size == 0:
			self.size = len(self.payload)
		else:
			self.size = size

		Protocol.__init__(self, Protocol.HandleKARequest)

	def serialize(self):
		self.pkt = pack("I", self.size) + self.payload

		# Call parent ctor to init general variables
		return Protocol.serialize(self)

class ProtocolHandleVariablesRequest(Protocol):
	class Commands:
		SET = 0
		DEL = 1
		SHOW = 2

	def __init__(self, command, name = "", value = ""):
		self.command = command
		self.name = name
		self.value = value
		Protocol.__init__(self, Protocol.HandleVariablesRequest)

	def serialize(self):
		if self.command == ProtocolHandleVariablesRequest.Commands.SET:
			cmd = "SET %s %s\x00" % (self.name, self.value)
		elif self.command == ProtocolHandleVariablesRequest.Commands.DEL:
			cmd = "DEL %s\x00" % (self.name)
		elif self.command == ProtocolHandleVariablesRequest.Commands.SHOW:
			cmd = "SHOW\x00"

		self.pkt = pack("I", len(cmd)) + cmd

		# Call parent ctor to init general variables
		return Protocol.serialize(self)

class Packet:
	def __init__(self, original_size, payload, id = 0, frag_idx = 0):
		if len(payload) > MAX_PACKET_SIZE:
			raise Exception("Payload size cannot be greater than %d" % MAX_PACKET_SIZE)

		self.src = 0
		self.dst = 0
		self.id = id
		self.frag_idx = frag_idx
		self.original_size = original_size
		self.payload = payload

		# Pad with NULLs if it does not reach the appropriate size.
		if len(payload) != MAX_PACKET_SIZE:
			self.payload += "\x00" * (MAX_PACKET_SIZE - len(self.payload))

	def serialize(self):
		return pack("IIIII", self.src, self.dst, self.original_size, self.id, self.frag_idx) + self.payload

class FragmentedPacket:
	def __init__(self, original):
		if (original.__class__ is Packet):
			original = original.payload
		elif isinstance(original, Protocol):
			original = original.serialize()

		self.orig = original
		self.fragments = []

		# Fragment packet
		self.frag()

	def frag(self):
		pkt = self.orig
		fragments_num = len(pkt) / MAX_PACKET_SIZE

		if len(pkt) % MAX_PACKET_SIZE != 0:
			fragments_num += 1

		for i in xrange(fragments_num):
			self.fragments.append(Packet(len(pkt), \
						pkt[i * MAX_PACKET_SIZE : (i + 1) * MAX_PACKET_SIZE], \
						frag_idx = i))

	def send(self, s):
		# Send the fragments
		for pkt in self.fragments:
		        s.send(pkt.serialize())

